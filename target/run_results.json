{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.5", "generated_at": "2024-09-20T23:56:36.124812Z", "invocation_id": "2f27f654-80ca-4436-8837-818a852196a7", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:16.110432Z", "completed_at": "2024-09-20T23:56:16.241168Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:16.286099Z", "completed_at": "2024-09-20T23:56:17.828285Z"}], "thread_id": "Thread-7", "execution_time": 1.939793586730957, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f530-0001-03e30002a2c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.demo_project.nba_teams", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT \n        *\n    FROM \n        NBA.PUBLIC.TEAMS\n),\n\nrenamed AS (\n    SELECT\n        id as team_id,\n        full_name,\n        abbreviation as team_name_abbreviation,\n        nickname,\n        city,\n        state,\n        year_founded\n    FROM\n        source\n)\n\nSELECT \n    *\nFROM\n    renamed", "relation_name": "NBA.dbt_parker_staging.nba_teams"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:16.128368Z", "completed_at": "2024-09-20T23:56:16.203496Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:16.277529Z", "completed_at": "2024-09-20T23:56:17.825301Z"}], "thread_id": "Thread-5", "execution_time": 1.923093557357788, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f5f7-0001-03e300028882"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.demo_project.nba_team_spend", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT \n        *\n    FROM \n        NBA.PUBLIC.TEAM_SPEND\n),\n\nrenamed as (\n    SELECT \n        team_id,\n        team_city,\n        team_name,\n        full_name,\n        year as season,\n        total_spend as team_payroll,\n        active_payroll,\n        dead_payroll,\n        luxury_tax_payroll,\n        luxury_tax_space,\n        luxury_tax_bill\n    FROM \n        source\n)\n\nSELECT\n    *\nFROM\n    renamed", "relation_name": "NBA.dbt_parker_staging.nba_team_spend"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:16.153860Z", "completed_at": "2024-09-20T23:56:16.165676Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:16.270171Z", "completed_at": "2024-09-20T23:56:17.937631Z"}], "thread_id": "Thread-3", "execution_time": 1.9986729621887207, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f5f7-0001-03e30002888a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.demo_project.nba_player_info", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT \n        person_id AS player_id,\n        first_name,\n        last_name,\n        team_name,\n        position,\n        height,\n        weight\n    FROM \n        NBA.PUBLIC.COMMON_PLAYER_INFO\n)\n\nSELECT \n    *\nFROM\n    source", "relation_name": "NBA.dbt_parker_staging.nba_player_info"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:16.305670Z", "completed_at": "2024-09-20T23:56:16.383959Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:16.449801Z", "completed_at": "2024-09-20T23:56:17.854802Z"}], "thread_id": "Thread-6", "execution_time": 1.8886454105377197, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0003-043e-0001-03e300024d96"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.demo_project.nba_team_stats", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT \n        *\n    FROM \n        NBA.PUBLIC.TEAM_STATS\n),\nrenamed AS (\n    SELECT \n        team_id,\n        team_city,\n        team_name,\n        year AS season,\n        gp AS games_played,\n        wins,\n        losses,\n        conf_rank AS conference_rank,\n        div_rank AS division_rank,\n        po_wins AS playoff_wins,\n        po_losses AS playoff_losses,\n        nba_finals_appearance,\n        fgm AS field_goals_made,\n        fga AS field_goals_attempted,\n        fg3m AS three_pointers_made,\n        fg3a AS three_pointers_attempted,\n        ftm AS free_throws_made,\n        fta AS free_throws_attempted,\n        oreb AS offensive_rebounds,\n        dreb AS defensive_rebounds,\n        reb AS total_rebounds,\n        ast AS assists,\n        pf AS personal_fouls,\n        stl AS steals,\n        tov AS turnovers,\n        blk AS blocks,\n        pts AS points\n    FROM\n        source\n)\n\nSELECT \n    *\nFROM\n    renamed", "relation_name": "NBA.dbt_parker_staging.nba_team_stats"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:16.293203Z", "completed_at": "2024-09-20T23:56:16.310911Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:16.369493Z", "completed_at": "2024-09-20T23:56:18.069941Z"}], "thread_id": "Thread-4", "execution_time": 2.153052806854248, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f5f7-0001-03e300028886"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.demo_project.nba_player_salaries", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT \n        player_id,\n        player_name,\n        salary,\n        season\n    FROM \n        NBA.PUBLIC.PLAYER_SALARIES\n)\n\nSELECT \n    *\nFROM\n    source", "relation_name": "NBA.dbt_parker_staging.nba_player_salaries"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:16.169513Z", "completed_at": "2024-09-20T23:56:16.248655Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:16.361062Z", "completed_at": "2024-09-20T23:56:18.120137Z"}], "thread_id": "Thread-1", "execution_time": 2.232171058654785, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f51e-0001-03e30002c246"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.demo_project.nba_games", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT \n        *\n    FROM \n        NBA.PUBLIC.GAMES\n),\n\n\nrenamed AS (\n    SELECT \n        season_id,\n        team_id,\n        team_abbreviation,\n        team_name,\n        game_id,\n        game_date,\n        matchup,\n        wl,\n        min AS game_duration_mins,\n        pts AS points,\n        fgm AS field_goals_made,\n        fga AS field_goals_attempted,\n        fg_pct AS field_goal_pct,\n        fg3m AS three_point_made,\n        fg3a AS three_point_attempted,\n        fg3_pct AS three_point_pct,\n        ftm AS free_throws_made,\n        fta AS free_throws_attempted,\n        ft_pct AS free_throw_pct,\n        oreb AS offensive_rebounds,\n        dreb AS defensive_rebounds,\n        reb AS total_rebounds,\n        ast AS assists,\n        stl AS steals,\n        blk AS blocks,\n        tov AS turnovers,\n        pf AS personal_fouls,\n        plus_minus,\n        season,\n        game_type\n    FROM \n        source\n)\n\nSELECT \n    *\nFROM\n    renamed", "relation_name": "NBA.dbt_parker_staging.nba_games"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:16.189537Z", "completed_at": "2024-09-20T23:56:16.314831Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:16.378852Z", "completed_at": "2024-09-20T23:56:19.305311Z"}], "thread_id": "Thread-8", "execution_time": 3.3880906105041504, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0003-0487-0001-03e30002683a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.data_monitoring_metrics", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n    \n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as id\n\n,\n                \n        cast('dummy_string' as varchar) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar) as column_name\n\n,\n                \n        cast('dummy_string' as varchar) as metric_name\n\n,\n                \n        cast(123456789.99 as float) as metric_value\n\n,\n                \n        cast('dummy_string' as varchar) as source_value\n\n,\n                cast('2091-02-17' as timestamp) as bucket_start\n\n,\n                cast('2091-02-17' as timestamp) as bucket_end\n\n,\n                \n        cast(123456789 as integer) as bucket_duration_hours\n\n,\n                cast('2091-02-17' as timestamp) as updated_at\n\n,\n                \n        cast('dummy_string' as varchar) as dimension\n\n,\n                \n        cast('dummy_string' as varchar) as dimension_value\n\n,\n                \n        cast('dummy_string' as varchar) as metric_properties\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "NBA.dbt_parker_elementary.data_monitoring_metrics"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:18.160409Z", "completed_at": "2024-09-20T23:56:18.211592Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:18.233860Z", "completed_at": "2024-09-20T23:56:21.400498Z"}], "thread_id": "Thread-5", "execution_time": 3.498974561691284, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f521-0001-03e300025d0a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_exposures", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as maturity\n\n,\n                \n        cast('dummy_string' as varchar) as type\n\n,\n                \n        cast('dummy_string' as varchar) as owner_email\n\n,\n                \n        cast('dummy_string' as varchar) as owner_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as url\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_columns\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar) as label\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as raw_queries\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_exposures"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:18.308478Z", "completed_at": "2024-09-20T23:56:18.361352Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:18.379682Z", "completed_at": "2024-09-20T23:56:21.448999Z"}], "thread_id": "Thread-6", "execution_time": 3.358820915222168, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f5f7-0001-03e3000288a2"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_metrics", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as label\n\n,\n                \n        cast('dummy_string' as varchar) as model\n\n,\n                \n        cast('dummy_string' as varchar) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as sql\n\n,\n                \n        cast('dummy_string' as varchar) as timestamp\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as filters\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as time_grains\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as dimensions\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_metrics"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:18.217859Z", "completed_at": "2024-09-20T23:56:18.283911Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:18.295173Z", "completed_at": "2024-09-20T23:56:21.555410Z"}], "thread_id": "Thread-3", "execution_time": 3.5802173614501953, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f530-0001-03e30002a2d6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_invocations", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as invocation_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as job_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as job_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as job_run_id\n\n,\n                \n        cast('dummy_string' as varchar) as run_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as run_completed_at\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar) as command\n\n,\n                \n        cast('dummy_string' as varchar) as dbt_version\n\n,\n                \n        cast('dummy_string' as varchar) as elementary_version\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as invocation_vars\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as vars\n\n,\n                \n        cast('dummy_string' as varchar) as target_name\n\n,\n                \n        cast('dummy_string' as varchar) as target_database\n\n,\n                \n        cast('dummy_string' as varchar) as target_schema\n\n,\n                \n        cast('dummy_string' as varchar) as target_profile_name\n\n,\n                \n        cast(123456789 as integer) as threads\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as selected\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as yaml_selector\n\n,\n                \n        cast('dummy_string' as varchar) as project_id\n\n,\n                \n        cast('dummy_string' as varchar) as project_name\n\n,\n                \n        cast('dummy_string' as varchar) as env\n\n,\n                \n        cast('dummy_string' as varchar) as env_id\n\n,\n                \n        cast('dummy_string' as varchar) as cause_category\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as cause\n\n,\n                \n        cast('dummy_string' as varchar) as pull_request_id\n\n,\n                \n        cast('dummy_string' as varchar) as git_sha\n\n,\n                \n        cast('dummy_string' as varchar) as orchestrator\n\n,\n                \n        cast('dummy_string' as varchar) as dbt_user\n\n,\n                \n        cast('dummy_string' as varchar) as job_url\n\n,\n                \n        cast('dummy_string' as varchar) as job_run_url\n\n,\n                \n        cast('dummy_string' as varchar) as account_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as target_adapter_specific_fields\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_invocations"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:18.450839Z", "completed_at": "2024-09-20T23:56:18.487131Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:18.489900Z", "completed_at": "2024-09-20T23:56:21.723733Z"}], "thread_id": "Thread-1", "execution_time": 3.5228307247161865, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f613-0001-03e30002d10e"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_run_results", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as message\n\n,\n                \n        cast('dummy_string' as varchar) as status\n\n,\n                \n        cast('dummy_string' as varchar) as resource_type\n\n,\n                \n        cast(123456789.99 as float) as execution_time\n\n,\n                \n        cast('dummy_string' as varchar) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as compile_completed_at\n\n,\n                \n        cast(31474836478 as bigint) as rows_affected\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as compiled_code\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar) as query_id\n\n,\n                \n        cast('dummy_string' as varchar) as thread_id\n\n,\n                \n        cast('dummy_string' as varchar) as materialization\n\n,\n                \n        cast('dummy_string' as varchar) as adapter_response\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_run_results"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:18.186213Z", "completed_at": "2024-09-20T23:56:18.215998Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:18.263057Z", "completed_at": "2024-09-20T23:56:22.081135Z"}], "thread_id": "Thread-7", "execution_time": 4.146364450454712, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0003-043e-0001-03e300024dae"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_columns", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as parent_unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as data_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as table_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as resource_type\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_columns"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:19.597456Z", "completed_at": "2024-09-20T23:56:19.620307Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:19.622899Z", "completed_at": "2024-09-20T23:56:22.349895Z"}], "thread_id": "Thread-8", "execution_time": 2.9442355632781982, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f5f7-0001-03e3000288aa"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_seeds", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as alias\n\n,\n                \n        cast('dummy_string' as varchar) as checksum\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as owner\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_seeds"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:16.144963Z", "completed_at": "2024-09-20T23:56:16.184291Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:16.262790Z", "completed_at": "2024-09-20T23:56:22.386484Z"}], "thread_id": "Thread-2", "execution_time": 6.447096824645996, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0003-0487-0001-03e300026836"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.demo_project.nba_player_game_logs", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT \n        *,\n        \n    DATEADD(\n        'second', \n        UNIFORM(0, 86400, RANDOM()), \n        CURRENT_DATE\n    )\n AS timestamp_column -- use the macro here to generate random timestamps\n    FROM \n        NBA.PUBLIC.PLAYER_GAME_LOGS\n),\n\nrenamed AS (\n    SELECT\n        player_id,\n        player_name,\n        nickname,\n        team_id,\n        team_abbreviation,\n        team_name,\n        game_id,\n        game_date,\n        matchup,\n        wl as win_loss,\n        min AS mins_played,\n        fgm AS field_goals_made,\n        fga AS field_goals_attempted,\n        fg_pct AS field_goal_pct,\n        fg3m AS three_point_made,\n        fg3a AS three_point_attempted,\n        fg3_pct AS three_point_pct,\n        ftm AS free_throws_made,\n        fta AS free_throws_attempted,\n        ft_pct AS free_throw_pct,\n        oreb AS offensive_rebounds,\n        dreb AS defensive_rebounds,\n        reb AS total_rebounds,\n        ast AS assists,\n        tov AS turnovers,\n        stl AS steals,\n        blk AS blocks,\n        pf AS personal_fouls,\n        pts AS points,\n        plus_minus AS plus_minus,\n        season,\n        game_type,\n        loaded_at_dttm -- keep the generated timestamp\n    FROM \n        source\n)\n\nSELECT\n    *\nFROM\n    renamed", "relation_name": "NBA.dbt_parker_staging.nba_player_game_logs"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:22.789270Z", "completed_at": "2024-09-20T23:56:22.830572Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:22.837481Z", "completed_at": "2024-09-20T23:56:24.215747Z"}], "thread_id": "Thread-8", "execution_time": 1.6290183067321777, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f523-0001-03e3000292ce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.metadata", "compiled": true, "compiled_code": "\n\nSELECT\n    '0.15.0' as dbt_pkg_version", "relation_name": "NBA.dbt_parker_elementary.metadata"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:21.777278Z", "completed_at": "2024-09-20T23:56:21.915567Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:21.949040Z", "completed_at": "2024-09-20T23:56:24.554074Z"}], "thread_id": "Thread-6", "execution_time": 2.986528158187866, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0003-0487-0001-03e30002685a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_source_freshness_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as source_freshness_execution_id\n\n,\n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as max_loaded_at\n\n,\n                \n        cast('dummy_string' as varchar) as snapshotted_at\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast(123456789.99 as float) as max_loaded_at_time_ago_in_s\n\n,\n                \n        cast('dummy_string' as varchar) as status\n\n,\n                \n        cast('dummy_string' as varchar) as error\n\n,\n                \n        cast('dummy_string' as varchar) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as compile_completed_at\n\n,\n                \n        cast('dummy_string' as varchar) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar) as warn_after\n\n,\n                \n        cast('dummy_string' as varchar) as error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as filter\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "NBA.dbt_parker_elementary.dbt_source_freshness_results"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:21.735648Z", "completed_at": "2024-09-20T23:56:21.775488Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:21.802104Z", "completed_at": "2024-09-20T23:56:24.679474Z"}], "thread_id": "Thread-5", "execution_time": 3.167942762374878, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f523-0001-03e3000292d6"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_snapshots", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as alias\n\n,\n                \n        cast('dummy_string' as varchar) as checksum\n\n,\n                \n        cast('dummy_string' as varchar) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as owner\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_snapshots"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:24.415566Z", "completed_at": "2024-09-20T23:56:24.430602Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:24.437525Z", "completed_at": "2024-09-20T23:56:25.321827Z"}], "thread_id": "Thread-8", "execution_time": 1.109816074371338, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f51f-0001-03e300027a1a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.demo_project.intermediate_player_info", "compiled": true, "compiled_code": "with player_info as (\n    select *\n    from\n        NBA.dbt_parker_staging.nba_player_info\n),\n\nplayer_salaries as (\n    select\n        player_id,\n        salary,\n        season\n    from\n        NBA.dbt_parker_staging.nba_player_salaries\n),\n\njoined as (\n\n    select\n        pi.*,\n        ps.salary,\n        ps.season\n    from\n        player_info as pi\n    left join\n        player_salaries as ps\n        on pi.player_id = ps.player_id\n)\n\nselect * from joined", "relation_name": "NBA.dbt_parker.intermediate_player_info"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:22.286290Z", "completed_at": "2024-09-20T23:56:22.340683Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:22.358035Z", "completed_at": "2024-09-20T23:56:25.353403Z"}], "thread_id": "Thread-7", "execution_time": 3.252084732055664, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f525-0001-03e30002b2de"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.elementary_test_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as id\n\n,\n                \n        cast('dummy_string' as varchar) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as model_unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as invocation_id\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as table_name\n\n,\n                \n        cast('dummy_string' as varchar) as column_name\n\n,\n                \n        cast('dummy_string' as varchar) as test_type\n\n,\n                \n        cast('dummy_string' as varchar) as test_sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_results_description\n\n,\n                \n        cast('dummy_string' as varchar) as owners\n\n,\n                \n        cast('dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_results_query\n\n,\n                \n        cast('dummy_string' as varchar) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_params\n\n,\n                \n        cast('dummy_string' as varchar) as severity\n\n,\n                \n        cast('dummy_string' as varchar) as status\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar) as test_short_name\n\n,\n                \n        cast('dummy_string' as varchar) as test_alias\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as result_rows\n\n,\n                \n        cast(31474836478 as bigint) as failed_row_count\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "NBA.dbt_parker_elementary.elementary_test_results"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:21.856478Z", "completed_at": "2024-09-20T23:56:21.912317Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:21.926522Z", "completed_at": "2024-09-20T23:56:25.342033Z"}], "thread_id": "Thread-3", "execution_time": 3.6768064498901367, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f523-0001-03e3000292da"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_sources", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as source_name\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as identifier\n\n,\n                \n        cast('dummy_string' as varchar) as loaded_at_field\n\n,\n                \n        cast('dummy_string' as varchar) as freshness_warn_after\n\n,\n                \n        cast('dummy_string' as varchar) as freshness_error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as freshness_filter\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as freshness_description\n\n,\n                \n        cast('dummy_string' as varchar) as relation_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as owner\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as source_description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_sources"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:22.860158Z", "completed_at": "2024-09-20T23:56:22.880247Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:22.883385Z", "completed_at": "2024-09-20T23:56:25.500154Z"}], "thread_id": "Thread-2", "execution_time": 2.8335041999816895, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0003-0487-0001-03e30002686a"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.schema_columns_snapshot", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as column_state_id\n\n,\n                \n        cast('dummy_string' as varchar) as full_column_name\n\n,\n                \n        cast('dummy_string' as varchar) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar) as column_name\n\n,\n                \n        cast('dummy_string' as varchar) as data_type\n\n,\n                \n        cast (True as boolean) as is_new\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "NBA.dbt_parker_elementary.schema_columns_snapshot"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:22.010623Z", "completed_at": "2024-09-20T23:56:22.036488Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:22.039147Z", "completed_at": "2024-09-20T23:56:25.476288Z"}], "thread_id": "Thread-1", "execution_time": 3.6808674335479736, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f51f-0001-03e300027a12"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_tests", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as short_name\n\n,\n                \n        cast('dummy_string' as varchar) as alias\n\n,\n                \n        cast('dummy_string' as varchar) as test_column_name\n\n,\n                \n        cast('dummy_string' as varchar) as severity\n\n,\n                \n        cast('dummy_string' as varchar) as warn_if\n\n,\n                \n        cast('dummy_string' as varchar) as error_if\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_params\n\n,\n                \n        cast('dummy_string' as varchar) as test_namespace\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as model_tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as model_owners\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('dummy_string' as varchar) as parent_model_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('dummy_string' as varchar) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar) as quality_dimension\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_tests"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:24.942831Z", "completed_at": "2024-09-20T23:56:24.956993Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:24.959448Z", "completed_at": "2024-09-20T23:56:25.871137Z"}], "thread_id": "Thread-5", "execution_time": 1.13205885887146, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f51e-0001-03e30002c286"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.monitors_runs", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from NBA.dbt_parker_elementary.data_monitoring_metrics\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end,\n           min(bucket_end) as first_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "relation_name": "NBA.dbt_parker_elementary.monitors_runs"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:24.782050Z", "completed_at": "2024-09-20T23:56:24.826954Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:24.830092Z", "completed_at": "2024-09-20T23:56:25.922927Z"}], "thread_id": "Thread-6", "execution_time": 1.3366763591766357, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f521-0001-03e300025d2e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.metrics_anomaly_score", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from NBA.dbt_parker_elementary.data_monitoring_metrics\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and bucket_end >= \n    dateadd(day, cast(-7 as integer), cast(date_trunc('day', \n  current_timestamp::timestamp\n) as timestamp))\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > 3 then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "relation_name": "NBA.dbt_parker_elementary.metrics_anomaly_score"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:25.569031Z", "completed_at": "2024-09-20T23:56:25.620745Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:25.626234Z", "completed_at": "2024-09-20T23:56:26.604013Z"}], "thread_id": "Thread-8", "execution_time": 1.2613086700439453, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f530-0001-03e30002a302"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.job_run_results", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    \nmin(cast(run_started_at as timestamp))\n as job_run_started_at,\n    \nmax(cast(run_completed_at as timestamp))\n as job_run_completed_at,\n    \n    datediff(\n        second,\n        \nmin(cast(run_started_at as timestamp))\n,\n        \nmax(cast(run_completed_at as timestamp))\n\n        )\n as job_run_execution_time\n  from NBA.dbt_parker_elementary.dbt_invocations\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "relation_name": "NBA.dbt_parker_elementary.job_run_results"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:25.610548Z", "completed_at": "2024-09-20T23:56:25.631957Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:25.648973Z", "completed_at": "2024-09-20T23:56:26.902688Z"}], "thread_id": "Thread-3", "execution_time": 1.5467195510864258, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f51e-0001-03e30002c28a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.alerts_anomaly_detection", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from NBA.dbt_parker_elementary.elementary_test_results\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "relation_name": "NBA.dbt_parker_elementary.alerts_anomaly_detection"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:25.715419Z", "completed_at": "2024-09-20T23:56:25.873570Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:25.877429Z", "completed_at": "2024-09-20T23:56:26.976120Z"}], "thread_id": "Thread-2", "execution_time": 1.4482386112213135, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f525-0001-03e30002b2e2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.alerts_dbt_tests", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from NBA.dbt_parker_elementary.elementary_test_results\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'   and lower(status) != 'skipped'  and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "relation_name": "NBA.dbt_parker_elementary.alerts_dbt_tests"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:25.597098Z", "completed_at": "2024-09-20T23:56:25.624416Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:25.636041Z", "completed_at": "2024-09-20T23:56:26.992467Z"}], "thread_id": "Thread-7", "execution_time": 1.630101203918457, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f521-0001-03e300025d36"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.snapshot_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from NBA.dbt_parker_elementary.dbt_run_results\n),\n\ndbt_snapshots as (\n    select * from NBA.dbt_parker_elementary.dbt_snapshots\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    coalesce(run_results.materialization, snapshots.materialization) as materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "relation_name": "NBA.dbt_parker_elementary.snapshot_run_results"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:18.397096Z", "completed_at": "2024-09-20T23:56:18.429590Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:18.436450Z", "completed_at": "2024-09-20T23:56:27.034158Z"}], "thread_id": "Thread-4", "execution_time": 8.853472471237183, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0003-043e-0001-03e300024db2"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.dbt_models", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as alias\n\n,\n                \n        cast('dummy_string' as varchar) as checksum\n\n,\n                \n        cast('dummy_string' as varchar) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as owner\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.dbt_models"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:25.855676Z", "completed_at": "2024-09-20T23:56:25.885145Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:25.888916Z", "completed_at": "2024-09-20T23:56:27.069849Z"}], "thread_id": "Thread-1", "execution_time": 1.4074680805206299, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f51e-0001-03e30002c28e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.alerts_schema_changes", "compiled": true, "compiled_code": "\n\n\nwith elementary_test_results as (\n    select * from NBA.dbt_parker_elementary.elementary_test_results\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "relation_name": "NBA.dbt_parker_elementary.alerts_schema_changes"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:26.160658Z", "completed_at": "2024-09-20T23:56:26.185044Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:26.196262Z", "completed_at": "2024-09-20T23:56:27.367584Z"}], "thread_id": "Thread-6", "execution_time": 1.4235172271728516, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0003-043e-0001-03e300024dde"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.alerts_dbt_source_freshness", "compiled": true, "compiled_code": "\n\nwith results as (\n  select * from NBA.dbt_parker_elementary.dbt_source_freshness_results\n),\n\nsources as (\n  select * from NBA.dbt_parker_elementary.dbt_sources\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  cast(results.generated_at as timestamp) as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  results.warn_after,\n  results.error_after,\n  results.filter,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path,\n  -- These columns below are deprecated. We add them since this view\n  -- was used to be loaded into an incremental model with those columns, their names were later changed\n  -- and Databricks doesn't respect `on_schema_change = 'append_new_columns'` properly, as described here -\n  -- https://docs.databricks.com/en/delta/update-schema.html#automatic-schema-evolution-for-delta-lake-merge\n  results.error_after as freshness_error_after,\n  results.warn_after as freshness_warn_after,\n  results.filter as freshness_filter\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere True and lower(status) != 'pass'", "relation_name": "NBA.dbt_parker_elementary.alerts_dbt_source_freshness"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:26.837206Z", "completed_at": "2024-09-20T23:56:26.856353Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:26.858988Z", "completed_at": "2024-09-20T23:56:27.779357Z"}], "thread_id": "Thread-8", "execution_time": 1.1558616161346436, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f51f-0001-03e300027a1e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.anomaly_threshold_sensitivity", "compiled": true, "compiled_code": "\n\nwith metrics_anomaly_score as (\n\n    select * from NBA.dbt_parker_elementary.metrics_anomaly_score\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as \"is_anomaly_1_5\",\n        case when abs(anomaly_score) >= 2 then true else false end as \"is_anomaly_2\",\n        case when abs(anomaly_score) >= 2.5 then true else false end as \"is_anomaly_2_5\",\n        case when abs(anomaly_score) >= 3 then true else false end as \"is_anomaly_3\",\n        case when abs(anomaly_score) >= 3.5 then true else false end as \"is_anomaly_3_5\",\n        case when abs(anomaly_score) >= 4 then true else false end as \"is_anomaly_4\",\n        case when abs(anomaly_score) >= 4.5 then true else false end as \"is_anomaly_4_5\"\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "relation_name": "NBA.dbt_parker_elementary.anomaly_threshold_sensitivity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:27.264220Z", "completed_at": "2024-09-20T23:56:27.337723Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:27.355748Z", "completed_at": "2024-09-20T23:56:28.214852Z"}], "thread_id": "Thread-3", "execution_time": 1.1399540901184082, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0003-043e-0001-03e300024de2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.dbt_artifacts_hashes", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n  'dbt_models' as artifacts_model,\n   metadata_hash\nfrom NBA.dbt_parker_elementary.dbt_models\n union all \n\nselect\n  'dbt_tests' as artifacts_model,\n   metadata_hash\nfrom NBA.dbt_parker_elementary.dbt_tests\n union all \n\nselect\n  'dbt_sources' as artifacts_model,\n   metadata_hash\nfrom NBA.dbt_parker_elementary.dbt_sources\n union all \n\nselect\n  'dbt_snapshots' as artifacts_model,\n   metadata_hash\nfrom NBA.dbt_parker_elementary.dbt_snapshots\n union all \n\nselect\n  'dbt_metrics' as artifacts_model,\n   metadata_hash\nfrom NBA.dbt_parker_elementary.dbt_metrics\n union all \n\nselect\n  'dbt_exposures' as artifacts_model,\n   metadata_hash\nfrom NBA.dbt_parker_elementary.dbt_exposures\n union all \n\nselect\n  'dbt_seeds' as artifacts_model,\n   metadata_hash\nfrom NBA.dbt_parker_elementary.dbt_seeds\n union all \n\nselect\n  'dbt_columns' as artifacts_model,\n   metadata_hash\nfrom NBA.dbt_parker_elementary.dbt_columns\n\n\norder by metadata_hash", "relation_name": "NBA.dbt_parker_elementary.dbt_artifacts_hashes"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:26.097222Z", "completed_at": "2024-09-20T23:56:26.116681Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:26.120078Z", "completed_at": "2024-09-20T23:56:28.432898Z"}], "thread_id": "Thread-5", "execution_time": 3.0696632862091064, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0, "query_id": "01b72adc-0002-f5f7-0001-03e3000288ca"}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.elementary.test_result_rows", "compiled": true, "compiled_code": "-- indexes are not supported in all warehouses, relevant to postgres only\n\n\n-- depends_on: NBA.dbt_parker_elementary.elementary_test_results\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as elementary_test_results_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as result_row\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "NBA.dbt_parker_elementary.test_result_rows"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:27.310893Z", "completed_at": "2024-09-20T23:56:27.368346Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:27.387688Z", "completed_at": "2024-09-20T23:56:28.535327Z"}], "thread_id": "Thread-7", "execution_time": 1.9204604625701904, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f523-0001-03e3000292ea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.model_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from NBA.dbt_parker_elementary.dbt_run_results\n),\n\ndbt_models as (\n    select * from NBA.dbt_parker_elementary.dbt_models\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    coalesce(run_results.materialization, models.materialization) as materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "relation_name": "NBA.dbt_parker_elementary.model_run_results"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:29.191294Z", "completed_at": "2024-09-20T23:56:29.207258Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:29.209529Z", "completed_at": "2024-09-20T23:56:30.444307Z"}], "thread_id": "Thread-4", "execution_time": 1.4444935321807861, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0002-f523-0001-03e3000292f6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.alerts_dbt_models", "compiled": true, "compiled_code": "\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from NBA.dbt_parker_elementary.model_run_results\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from NBA.dbt_parker_elementary.snapshot_run_results\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       cast(generated_at as timestamp) as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere True and lower(status) != 'success'and lower(status) != 'skipped'", "relation_name": "NBA.dbt_parker_elementary.alerts_dbt_models"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:27.274301Z", "completed_at": "2024-09-20T23:56:29.421000Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:29.424056Z", "completed_at": "2024-09-20T23:56:30.901395Z"}], "thread_id": "Thread-2", "execution_time": 3.83288311958313, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0003-043e-0001-03e300024de6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.information_schema_columns", "compiled": true, "compiled_code": "\n\n    \n  \n    \n  \n\n  with dbt_models_data as (\n      select\n          database_name,\n          schema_name,\n          alias as table_name\n      from NBA.dbt_parker_elementary.dbt_models\n  ),\n\n  dbt_snapshots_data as (\n      select\n          database_name,\n          schema_name,\n          alias as table_name\n      from NBA.dbt_parker_elementary.dbt_snapshots\n  ),\n\n  dbt_sources_data as (\n      select\n          database_name,\n          schema_name,\n          name as table_name\n      from NBA.dbt_parker_elementary.dbt_sources\n  ),\n\n  dbt_seeds_data as (\n      select\n          database_name,\n          schema_name,\n          name as table_name\n      from NBA.dbt_parker_elementary.dbt_seeds\n  ),\n\n  tables_information as (\n      select * from dbt_models_data\n      union all\n      select * from dbt_sources_data\n      union all\n      select * from dbt_snapshots_data\n      union all\n      select * from dbt_seeds_data\n  ),\n\n  columns_information as (\n      \n    \n    \n    \n        (\n    \n    \n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from NBA.INFORMATION_SCHEMA.COLUMNS\n    where upper(table_schema) = upper('PUBLIC')\n    \n)\n        \n            union all\n        \n    \n        (\n    \n    \n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from NBA.INFORMATION_SCHEMA.COLUMNS\n    where upper(table_schema) = upper('dbt_parker')\n    \n)\n        \n            union all\n        \n    \n        (\n    \n    \n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from NBA.INFORMATION_SCHEMA.COLUMNS\n    where upper(table_schema) = upper('dbt_parker_staging')\n    \n)\n        \n    \n\n\n\n  ),\n\n  information_schema_columns as (\n      select col_info.*\n      from tables_information tbl_info\n      join columns_information col_info\n          on (lower(tbl_info.database_name) = lower(col_info.database_name) and\n              lower(tbl_info.schema_name) = lower(col_info.schema_name) and\n              lower(tbl_info.table_name) = lower(col_info.table_name)\n          )\n  )\n\n  select *\n  from information_schema_columns\n\n", "relation_name": "NBA.dbt_parker_elementary.information_schema_columns"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-20T23:56:31.100721Z", "completed_at": "2024-09-20T23:56:31.114505Z"}, {"name": "execute", "started_at": "2024-09-20T23:56:31.116928Z", "completed_at": "2024-09-20T23:56:32.770493Z"}], "thread_id": "Thread-6", "execution_time": 1.8854193687438965, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b72adc-0003-043e-0001-03e300024dea"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.elementary.enriched_columns", "compiled": true, "compiled_code": "\n\n\nwith information_schema_columns as (\n    select\n        lower(database_name) as database_name,\n        lower(schema_name) as schema_name,\n        lower(table_name) as table_name,\n        lower(column_name) as name,\n        data_type\n    from NBA.dbt_parker_elementary.information_schema_columns\n),\n\ndbt_columns as (\n    select\n        lower(database_name) as database_name,\n        lower(schema_name) as schema_name,\n        lower(table_name) as table_name,\n        lower(name) as name,\n        description\n    from NBA.dbt_parker_elementary.dbt_columns\n)\n\nselect\n    database_name,\n    schema_name,\n    table_name,\n    name,\n    data_type,\n    description\nfrom information_schema_columns\nleft join dbt_columns using (database_name, schema_name, table_name, name)", "relation_name": "NBA.dbt_parker_elementary.enriched_columns"}], "elapsed_time": 22.250953674316406, "args": {"which": "run", "version_check": true, "quiet": false, "require_explicit_package_overrides_for_builtin_materializations": false, "introspect": true, "indirect_selection": "eager", "defer": false, "printer_width": 80, "project_dir": "/workspaces/fxtn7c3oiwkalwzz/repository", "log_level_file": "debug", "partial_parse_file_diff": true, "show_resource_report": false, "static_parser": true, "enable_legacy_logger": false, "exclude": [], "empty": false, "print": true, "require_resource_names_without_spaces": false, "log_file_max_bytes": 10485760, "macro_debugging": false, "use_colors": true, "log_level": "info", "profiles_dir": "/workspaces/fxtn7c3oiwkalwzz", "source_freshness_run_project_hooks": true, "warn_error_options": {"include": [], "exclude": []}, "favor_state": false, "log_format_file": "debug", "strict_mode": false, "invocation_command": "dbt run", "log_format": "default", "select": [], "partial_parse": true, "send_anonymous_usage_stats": true, "cache_selected_only": false, "vars": {}, "use_colors_file": true, "write_json": true, "log_path": "/workspaces/fxtn7c3oiwkalwzz/repository/logs", "populate_cache": true}}